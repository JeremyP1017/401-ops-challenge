

import os
import sys
from cryptography.fernet import Fernet

# Define the encryption and decryption functions
def encrypt_decrypt_file(filename, key, mode):
    f = Fernet(key)
    with open(filename, "rb") as file:
        # Read the file's contents
        file_contents = file.read()
        # Encrypt or decrypt the contents depending on the mode
        if mode == 'encrypt':
            contents = f.encrypt(file_contents)
        else:
            contents = f.decrypt(file_contents)
    with open(filename, "wb") as file:
        # Write the new contents back to the file
        file.write(contents)

# Define the recursive encryption and decryption functions
def encrypt_decrypt_directory(directory_path, key, mode):
    # Iterate through all files and subfolders in the directory
    for item in os.listdir(directory_path):
        item_path = os.path.join(directory_path, item)
        if os.path.isdir(item_path):
            # Recursively encrypt or decrypt any subfolders
            encrypt_decrypt_directory(item_path, key, mode)
        else:
            # Encrypt or decrypt any files depending on the mode
            if mode == 'encrypt':
                encrypt_decrypt_file(item_path, key, 'encrypt')
            elif mode == 'decrypt' and item_path.endswith(".encrypted"):
                encrypt_decrypt_file(item_path, key, 'decrypt')
                # Rename the decrypted file to remove the ".encrypted" extension
                os.rename(item_path, item_path[:-10])

if __name__ == '__main__':
    # Get the encryption or decryption key from the user
    key = input('Enter the encryption or decryption key: ')
    if not key:
        print('Key is required to encrypt or decrypt files.')
        sys.exit()
    key = key.encode()

    # Get the directory path from the user
    directory_path = input('Enter the directory path to encrypt or decrypt: ')
    if not directory_path:
        print('Directory path is required to encrypt or decrypt files.')
        sys.exit()

    # Get the mode from the user
    mode = input('Enter "encrypt" to encrypt files or "decrypt" to decrypt files: ')
    if mode not in ['encrypt', 'decrypt']:
        print('Invalid mode specified. Please enter "encrypt" or "decrypt".')
        sys.exit()

    # Encrypt or decrypt the directory recursively
    encrypt_decrypt_directory(directory_path, key, mode)

#this script was writen with the help of chatgpt
