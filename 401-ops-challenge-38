#!/usr/bin/env python3

# Author:      Abdou Rockikz
# Description: This script scans a given URL for XSS (Cross-Site Scripting) vulnerabilities by searching for HTML forms
#              and testing them with a payload that triggers an alert prompt with some text.
# Date:        TODO: Add date
# Modified by: TODO: Add your name

### TODO: Install requests bs4 before executing this in Python3

# Import libraries

import requests
from pprint import pprint
from bs4 import BeautifulSoup as bs
from urllib.parse import urljoin

# Declare functions

### This function retrieves all HTML forms on a given URL.
### It uses the BeautifulSoup library to parse the HTML content of the page and find all form elements.
### The purpose of this function is to identify the forms present on the page that can potentially be vulnerable to XSS attacks.
def get_all_forms(url):
    soup = bs(requests.get(url).content, "html.parser")
    return soup.find_all("form")

### This function extracts details from a given HTML form.
### It retrieves the form's action attribute (URL to submit the form), method attribute (HTTP method: GET or POST), and input fields.
### The purpose of this function is to gather information about the form that will be used to construct the payload and submit the form.
def get_form_details(form):
    details = {}
    action = form.attrs.get("action").lower()
    method = form.attrs.get("method", "get").lower()
    inputs = []
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        inputs.append({"type": input_type, "name": input_name})
    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    return details

### This function submits a form with a payload that triggers an XSS vulnerability.
### It constructs the payload by replacing text or search input fields with the specified value.
### The function then submits the form either via a POST request or a GET request, depending on the form's method attribute.
### The purpose of this function is to test the form with the payload and determine if it is vulnerable to XSS attacks.
def submit_form(form_details, url, value):
    target_url = urljoin(url, form_details["action"])
    inputs = form_details["inputs"]
    data = {}
    for input in inputs:
        if input["type"] == "text" or input["type"] == "search":
            input["value"] = value
        input_name = input.get("name")
        input_value = input.get("value")
        if input_name and input_value:
            data[input_name] = input_value

    if form_details["method"] == "post":
        return requests.post(target_url, data=data)
    else:
        return requests.get(target_url, params=data)

### This function performs an XSS scan on a given URL.
### It calls the get_all_forms function to retrieve all forms on the URL and then iterates over each form.
### For each form, it calls the get_form_details function to extract the form's information.
### It then submits the form using the submit_form function with a payload that triggers an XSS vulnerability.
### If the response content of the submitted form contains the XSS payload, it indicates that the form is vulnerable.
### The purpose of this function is to scan the URL for XSS vulnerabilities by testing each form present on the page.
### It prints the details of any vulnerable form and returns a boolean value indicating if any vulnerability was detected.
def scan_x

#this script was written with the help of chatgpt
